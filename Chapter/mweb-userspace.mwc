# MWEB(prototype) User Space

@[user space@]
@{dependencies of user space@}
@{procedures of user space@}
@{initialize user space@}
@

In most cases, what we want is not merely tangling a node, but also converting that node to
another type, for example, if you wrote a C program and tangled the node of that C program's
source code, you could get is a C source file, rather than an executable file.
@[procedures of user space@]
(define (tangle-as node-name type)
  (mweb-convert-to (mweb-tangle node-name) (mweb-search-type node-name) type))

(define (copy-as ref des)
  (run-shell-command (string-append "cp " ref " " des)))
@

A lot of convertings are delegated to other programs.
@[dependencies of user space@]
(load-option 'synchronous-subprocess)
@

## Types

@[initialize user space@]
@{define code chunk types@}
@

### Unix Script
@[define code chunk types@]
(mweb-type "Unix Script")
(mweb-new-relation "Unix Script" "Executable"
  (lambda (ref)
    (run-shell-command (string-append "chmod +x " ref))
    ref))
@

### C code
Some definitions of types related to C programming language.
@[define code chunk types@]
(mweb-type "C Code" "C Source" "C Program")
(mweb-new-relation "C Code" "C Source" (lambda (ref) ref))
(mweb-new-relation "C Program" "Executable"
  (lambda (ref)
    (let ((compile-script @{extend |ref| to compiling script@}))
      (run-shell-command (string-append "sh " compile-script))
      (let ((c-program (file->reference "a.out")))
        (run-shell-command (string-append "chmod +x " c-program))
	c-program))))
@

@[extend |ref| to compiling script@]
(content->reference
  (string-append "#!/bin/sh\n"
                 (reference->content ref) "\n"
		 "for f in $IN; do cp $f $f.c; INFILES=\"$INFILES $f.c\"; done\n"
		 "gcc $CFLAGS $INFILES"))
@

