## A simple C program

This extension defines the structure of a simple C program.

@[whole program@:C Code@]
@{includes@}
@{macros@}
@{datatypes@}
@{data@}
@{prototypes@}
@{functions@}
@

To initialize code chunks, because _MWEB(prototype)_ does not accept empty code chunk.
@[macros@]

@

@[datatypes@]

@

@[data@]

@

@[prototypes@]

@

@[functions@]

@

Some conventional header files, they are needed in almost any non-trivial C program.
@[includes@]
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
@

The main function.
@[whole program@]
int
main(int argc, char *argv[])
{
	@{initialize environment@}
#ifndef TESTING
	@{main@}
#else
	@{test@}
#endif
}
@

@[initialize environment@]

@

@[main@]

@

@[test@]

@

@[define code chunk types@]
(mweb-type "Tested C Code")
(mweb-new-relation "Tested C Code" "C Code"
  (lambda (ref)
    (content->reference
      (string-append "#define TESTING\n" (reference->content ref) "\n#undef TESTING"))))
@

A trick in debugging.
@[data@]
int fixed_point = 1;
@

@[single module C@:C Program@]
CFLAGS=-g
IN="@[whole program@:C Source@]"
@

@[tangle@]
@{user space@}
@{procedures for output@}
@{output@}
@

@[procedures for output@]
(define (output file)
  (copy-as (tangle-as "single module C" "Executable") file))
(define (output-src file)
  (copy-as (tangle-as "single module C" "C Source") file))
@

_output_ code chunk does not need initialization, every single-module-C program need to
output its executable file.

@i mweb-userspace.mwc

