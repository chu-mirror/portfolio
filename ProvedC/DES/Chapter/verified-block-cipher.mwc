## A generic framework for symmetric ciphers

The symmetric ciphers here are particularly block ciphers, encrypt a block of bits at once. 
So the basic object we need to face to is _block_ and _key_, the size of both is specified
by macros.

We need to specify both size in ciphers.
@[initialize environment@]
#ifndef CIPHER_BLOCK_SIZE
{
	fprintf(stderr, "CIPHER_BLOCK_SIZE is not specified\n");
	exit(1);
}
#endif
#ifndef CIPHER_KEY_SIZE
{
	fprintf(stderr, "CIPHER_KEY_SIZE is not specified\n");
	exit(1);
}
#endif
@

The ciphers are supposed to be implemented in a functional style, and for simplicity,
arguments are passed by value.
@[datatypes@]
typedef struct cipher_block {unsigned char bytes[CIPHER_BLOCK_SIZE];} cipher_block_t;
typedef struct cipher_key {unsigned char bytes[CIPHER_KEY_SIZE];} cipher_key_t;
@

This framework supposes that ciphers provide two functions: _encrypt_, and _decrypt_.
@[prototypes@]
cipher_block_t encrypt(cipher_block_t, cipher_key_t);
cipher_block_t decrypt(cipher_block_t, cipher_key_t);
@

This framework also gives a common interface for all ciphers, encrypt/decrypt a file.
A rough error handling system is used.
@[main@]
{ enum {ENCRYPT, DECRYPT} op; FILE *input, *output; cipher_key_t key;
	@{parse arguments to get |op|, |input|, and |key|@}
	@{prepare |output|@}

	@{encrypt or decrypt |input| by |key| depending on |op|, put result on |output|@}

	return 0;
syntatic_error:
	fprintf(stderr, "usage: %s -{e|d} file key\n", argv[0]);
	exit(1);
input_error:
	fprintf(stderr, "something wrong in file or key\n");
	exit(1);
system_error:
	perror(NULL);
	exit(1);
}
@

@[encrypt or decrypt |input| by |key| depending on |op|, put result on |output|@]
{ cipher_block_t br, bw; int in_mid; size_t nr; /* n bytes read */
	in_mid = 0;
	do {
		nr = fread(br.bytes, sizeof(unsigned char), CIPHER_BLOCK_SIZE, input);
		if (ferror(input)) goto system_error;

		/* PKCS5 padding */
		if (nr < CIPHER_BLOCK_SIZE && op == ENCRYPT) { int i; 
			for (i = nr; i < CIPHER_BLOCK_SIZE; i++) {
				br.bytes[i] = CIPHER_BLOCK_SIZE - nr;
			}
			nr = CIPHER_BLOCK_SIZE;
		} else if (nr == CIPHER_BLOCK_SIZE) {
			/* do nothing */
		} else goto input_error;

		switch (op) {
		case ENCRYPT:
			bw = encrypt(br, key);
			break;
		case DECRYPT:
			bw = decrypt(br, key);
			break;
		}
		@{handle tail condition@}
		fwrite(bw.bytes, sizeof(unsigned char), CIPHER_BLOCK_SIZE, output);
		if (ferror(output)) goto system_error;
	} while (1);
}
@

@[handle tail condition@]
{ unsigned char c;
	c = getc(input);
	if (feof(input)) { size_t nw; /* n bytes to write */
		if (op == DECRYPT) {
			fwrite(bw.bytes, sizeof(unsigned char),
				CIPHER_BLOCK_SIZE-bw.bytes[CIPHER_BLOCK_SIZE-1], output);
		} else {
			fwrite(bw.bytes, sizeof(unsigned char), CIPHER_BLOCK_SIZE, output);
		}
		if (ferror(output)) goto system_error;
		break;
	}
	ungetc(c, input);
}
@

@[parse arguments to get |op|, |input|, and |key|@]
{
	if (argc != 4) goto syntatic_error;
	if (strlen(argv[1]) != 2 || argv[1][0] != '-') goto syntatic_error;
	switch (argv[1][1]) {
	case 'e':
		op = ENCRYPT;
		break;
	case 'd':
		op = DECRYPT;
		break;
	default:
		goto syntatic_error;
	}

	input = fopen(argv[2], "r");
	if (input == NULL) goto system_error;
	/* |key| is represented by a sequence of hexadecimal numbers(uppercase), the length should be an even number */
	{ int i, len = strlen(argv[3]);
		if (len%2) goto input_error;
		for (i = 0; i+1 < len; i += 2) { int h, l;
			h = isupper(argv[3][i])? argv[3][i]-'A'+10 : argv[3][i]-'0';
			l = isupper(argv[3][i+1])? argv[3][i+1]-'A'+10 : argv[3][i+1]-'0';
			key.bytes[i/2] = (h<<4) + l;
		}
		for (i = i/2; i < CIPHER_KEY_SIZE; i++) {
			key.bytes[i] = 0;
		}
	}
}
@

@[includes@]
#include <ctype.h>
@

@[prepare |output|@]
{ char *output_name;
	output_name = (char *) malloc(strlen(argv[2]) + 3);
	strcpy(output_name, argv[2]);
	if (op == ENCRYPT) {
		strcat(output_name, ".e");
	} else {
		strcat(output_name, ".d");
	}
	output = fopen(output_name, "w");
	if (output == NULL) goto system_error;
	free(output_name);
}
@

Because we are doing things with bits, it's better to include this file.
@[includes@]
#include <stdint.h>
@

@i single-module-c.mwc proved-c.mwc
