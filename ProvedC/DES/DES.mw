# Data Encryption Standard (proved)

DES algorithm has its own data structures.

@[proved functions@]
uint64_t block_l(uint64_t b)
{
	return b >> 32;
}
uint64_t block_r(uint64_t b)
{
	return b & 0x00000000FFFFFFFFu;
}
@

@[prototypes@]
uint64_t block_l(uint64_t);
uint64_t block_r(uint64_t);
@

@[functions@]
uint64_t DES_encrypt(uint64_t b, uint64_t k)
{ uint64_t t = b;
	@{initial permutation for encrypting@}
	@{go through rounds for encrypting@}
	@{inverse initial permutation for encrypting@}
	return t;
}
uint64_t DES_decrypt(uint64_t b, uint64_t k)
{ uint64_t t = b;
	@{initial permutation for decrypting@}
	@{go through rounds for decrypting@}
	@{inverse initial permutation for decrypting@}
	return t;
}
@

@[prototypes@]
uint64_t DES_encrypt(uint64_t, uint64_t);
uint64_t DES_decrypt(uint64_t, uint64_t);
@

@[proved functions@]
uint64_t select_bits(uint64_t in, int len_in, int len_out, int *p)
{ int i; uint64_t out = 0;
	for (i = 0; i < len_out; i++) {
		@{get |p[i]|th bit of |in|, append it to out@}
	}
	return out;
}
@

@[get |p[i]|th bit of |in|, append it to out@]
{
	out <<= 1;
	out |= (in >> (len_in - p[i])) & (uint64_t)1;
}
@

@[prototypes@]
uint64_t select_bits(uint64_t, int, int, int *);
@

## Initial Permutation

The permutation and reverse permutation.

@[initial permutation for encrypting@]
t = select_bits(t, 64, 64, IP);
@

@[inverse initial permutation for encrypting@]
t = select_bits(t, 64, 64, IPi);
@

@[initial permutation for decrypting@]
t = select_bits(t, 64, 64, IP);
@

@[inverse initial permutation for decrypting@]
t = select_bits(t, 64, 64, IPi);
@

## Rounds

@[functions@]
uint64_t basic_round(uint64_t b, int n, uint64_t k)
{
	return block_r(b) << 32 | block_l(b) ^ f(block_r(b), KS(n, k));
}
@

@[prototypes@]
uint64_t basic_round(uint64_t, int, uint64_t);
@

@[go through rounds for encrypting@]
{ int i;
	for (i = 1; i <= 16; i++) {
		t = basic_round(t, i, k);
#ifdef TESTING
	printf("round %d: %016lX\n", i, t);
#endif
	}
	t = block_r(t) << 32 | block_l(t);
}
@


@[go through rounds for decrypting@]
{ int i;
	for (i = 16; i >= 1; i--) {
		t = basic_round(t, i, k);
	}
	t = block_r(t) << 32 | block_l(t);
}
@

## The Cipher Function

@[functions@]
uint64_t f(uint64_t r, uint64_t k)
{ uint64_t out, t; int i;
	out = select_bits(r, 32, 48, E) ^ k;
	for (i = 0, t = 0; i < 8; i++) { uint64_t s;
		s = (out >> (6*(7-i))) & 0x3F;
		t = (t<<4) + S[i][((s&0x20)>>4) | (s&1)][(s&0x1F)>>1];
	}
	out = select_bits(t, 32, 32, P);
	return out;
}
@

@[prototypes@]
uint64_t f(uint64_t, uint64_t);
@

## Key Scheme
@[proved functions@]
uint64_t circle_shiftl (uint64_t b, int len_b, int n)
{
	return ((b << n) | (b >> (n-len_b))) & (((uint64_t) 1 << n) - 1);
}
@

@[prototypes@]
uint64_t circle_shiftl (uint64_t, int, int);
@

@[functions@]
uint64_t KS(int n, uint64_t k)
{ uint64_t c, d; int i; static int sf[16] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
	c = select_bits(k, 64, 28, PC_1_C);
	d = select_bits(k, 64, 28, PC_1_D);
	for (i = 0; i < n; i++) {
		c = circle_shiftl(c, 28, sf[i]);
		d = circle_shiftl(d, 28, sf[i]);
	}
	return select_bits((c<<28)|d, 56, 48, PC_2);
}
@

@[prototypes@]
uint64_t KS(int, uint64_t);
@

## Interface to Framework

According to FIPS46-3, we have:
@[macros@]
#define CIPHER_BLOCK_SIZE 8
#define CIPHER_KEY_SIZE 8
@

@[functions@]
cipher_block_t encrypt(cipher_block_t in, cipher_key_t key)
{ uint64_t b, k; int i;
	b = k = 0;
	for (i = 0; i < 7; i++) {
		b += in.bytes[i], b <<= 8;
		k += key.bytes[i], k <<= 8;
	}
	b += in.bytes[7]; k += key.bytes[7];
#ifdef TESTING
	printf("%016lX to ", b);
#endif
	b = DES_encrypt(b, k);
#ifdef TESTING
	printf("%016lX by %016lX\n", b, k);
#endif
	for (i = 0; i < 8; i++) {
		in.bytes[7-i] = b % (1<<8);
		b >>= 8;
	}
	return in;
}

cipher_block_t decrypt(cipher_block_t in, cipher_key_t key)
{ uint64_t b, k; int i;
	b = k = 0;
	for (i = 0; i < 7; i++) {
		b += in.bytes[i], b <<= 8;
		k += key.bytes[i], k <<= 8;
	}
	b += in.bytes[7]; k += key.bytes[7];
#ifdef TESTING
	printf("%016lX to ", b);
#endif
	b = DES_decrypt(b, k);
#ifdef TESTING
	printf("%016lX by %016lX\n", b, k);
#endif
	for (i = 0; i < 8; i++) {
		in.bytes[7-i] = b % (1<<8);
		b >>= 8;
	}
	return in;
}
@

@[output@]
(output-verified "verified.c")
(output "DES")
@

## Appendix

@[data@]
int IP[64] = {
	58, 50, 42, 34, 26, 18, 10, 2,
	60, 52, 44, 36, 28, 20, 12, 4,
	62, 54, 46, 38, 30, 22, 14, 6,
	64, 56, 48, 40, 32, 24, 16, 8,
	57, 49, 41, 33, 25, 17, 9, 1,
	59, 51, 43, 35, 27, 19, 11, 3,
	61, 53, 45, 37, 29, 21, 13, 5,
	63, 55, 47, 39, 31, 23, 15, 7
};
int IPi[64] = {
	40, 8, 48, 16, 56, 24, 64, 32,
	39, 7, 47, 15, 55, 23, 63, 31,
	38, 6, 46, 14, 54, 22, 62, 30,
	37, 5, 45, 13, 53, 21, 61, 29,
	36, 4, 44, 12, 52, 20, 60, 28,
	35, 3, 43, 11, 51, 19, 59, 27,
	34, 2, 42, 10, 50, 18, 58, 26,
	33, 1, 41, 9, 49, 17, 57, 25
};
int E[48] = {
	32, 1, 2, 3, 4, 5,
	4, 5, 6, 7, 8, 9,
	8, 9, 10, 11, 12, 13,
	12, 13, 14, 15, 16, 17,
	16, 17, 18, 19, 20, 21,
	20, 21, 22, 23, 24, 25,
	24, 25, 26, 27, 28, 29,
	28, 29, 30, 31, 32, 1
};
int P[32] = {
	16, 7, 20, 21,
	29, 12, 28, 17,
	1, 15, 23, 26,
	5, 18, 31, 10,
	2, 8, 24, 14,
	32, 27, 3, 9,
	19, 13, 30, 6,
	22, 11, 4, 25
};
int S[8][4][16] =
{
	{
		{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
		{0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
		{4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
		{15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
	},
	{
		{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
		{3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
		{0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
		{13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
	},
	{
		{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
		{13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
		{13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
		{1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
	},
	{
		{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
		{13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
		{10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
		{3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
	},
	{
		{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
		{14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
		{4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
		{11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
	},
	{
		{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
		{10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
		{9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
		{4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
	},
	{
		{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
		{13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
		{1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
		{6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
	},
	{
		{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
		{1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
		{7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
		{2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
	}
};

int PC_1_C[28] = {
	57, 49, 41, 33, 25, 17, 9,
	1, 58, 50, 42, 34, 26, 18,
	10, 2, 59, 51, 43, 35, 27,
	19, 11, 3, 60, 52, 44, 36
};
int PC_1_D[28] = {
	63, 55, 47, 39, 31, 23, 15,
	7, 62, 54, 46, 38, 30, 22,
	14, 6, 61, 53, 45, 37, 29,
	21, 13, 5, 28, 20, 12, 4
};
int PC_2[48] = {
	14, 17, 11, 24, 1, 5,
	3, 28, 15, 6, 21, 10,
	23, 19, 12, 4, 26, 8,
	16, 7, 27, 20, 13, 2,
	41, 52, 31, 37, 47, 55,
	30, 40, 51, 45, 33, 48,
	44, 49, 39, 56, 34, 53,
	46, 42, 50, 36, 29, 32
};
@

@i verified-block-cipher.mwc
